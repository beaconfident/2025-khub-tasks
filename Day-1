{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMGdk/6mZZQQoVyvd0n4acQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/beaconfident/2025-khub-tasks/blob/main/KHUB.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**WEEK-1**"
      ],
      "metadata": {
        "id": "8WLQJbtWPUcx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "                  *DAY-1*"
      ],
      "metadata": {
        "id": "9fP7SP22B30B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Strings\n",
        "\n",
        "*  strings are surrounded by single quote'' or double quote\"\"\n",
        "*   you can display strings with print function\n",
        "*   we can use quotes in strings\n",
        "*   strings can also represnted in variables also\n",
        "we can use multilines in srtings with three double quotes or three single quotes\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "6SUg7HFkPtMV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aF_AbH1TPPV7",
        "outputId": "0cac8c4c-0e96-489d-b673-0a4f0de8a3e3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello\n",
            "Hello\n",
            "hiii\n",
            "this website is 'colab'\n",
            "it's alright\n",
            "Today is a very nice and beautiful day\n",
            "Today is a very nice and beautiful day\n"
          ]
        }
      ],
      "source": [
        "print('Hello')\n",
        "print(\"Hello\")\n",
        "\n",
        "\n",
        "a='hiii'\n",
        "print(a)\n",
        "\n",
        "\n",
        "print(\"this website is 'colab'\")\n",
        "print(\"it's alright\")\n",
        "\n",
        "print(\"\"\"Today is a very nice and beautiful day\"\"\")\n",
        "print('''Today is a very nice and beautiful day''')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Python does not have a character data type, a single character is simply a string with a length of 1.\n",
        "\n",
        "Square brackets can be used to access elements of the string.\n",
        "\n",
        "Get the character at position 1 (remember that the first character has the position 0):"
      ],
      "metadata": {
        "id": "7ONxHZ5STX2b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = \"Hello, World!\"\n",
        "print(a[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zjm3I35WhFf1",
        "outputId": "dcc02c1c-d6b2-4bf3-f8f4-4a210f413c63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "e\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since strings are arrays, we can loop through the characters in a string, with a for loop."
      ],
      "metadata": {
        "id": "hUgc0l7Qhmjc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for a in \"banana\":\n",
        "  print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W9U59C-chn40",
        "outputId": "5ccdf063-2785-408b-be43-8d999ef9c695"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b\n",
            "a\n",
            "n\n",
            "a\n",
            "n\n",
            "a\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "to get length of string,we use len() function"
      ],
      "metadata": {
        "id": "QyL2MIgUiQFE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=\"hello,world\"\n",
        "print(len(a))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ze6-YFqBieLX",
        "outputId": "9d09c7cf-adf6-4b22-830d-69505d7d9a5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**check string**\n",
        "\n",
        "*   To check if a certain phrase or character is present in a string, we can use the keyword in\n",
        "*  use it in a if statment\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ascACnZcjxFc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "txt = \"The best thing in a life should be happy!\"\n",
        "print(\"life\" in txt)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "txt = \"The best thing in a life should be happy!\"\n",
        "if \"happy\" in txt:\n",
        "  print(\"Yes, 'happy' is present.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "90XXM9_OkVUH",
        "outputId": "ddc1ed97-72bb-46ae-fcc5-6ec6521066d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "Yes, 'happy' is present.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**check if not**\n",
        "\n",
        "\n",
        "\n",
        "*   To check if a certain phrase or character is NOT present in a string, we can use the keyword not in\n",
        "*   use it an if statement\n",
        "\n"
      ],
      "metadata": {
        "id": "tYs2GFB2kqOI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "txt = \"The best things in life should be happy!\"\n",
        "print(\"sad\" not in txt)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "txt = \"The best things in life should be happy!\"\n",
        "if \"sad\" not in txt:\n",
        "  print(\"No, 'sad' is not present.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k1jPPG8llknw",
        "outputId": "87046587-850d-495b-e0b7-2c856387a420"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "No, 'sad' is not present.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**slicing strings**(the first character has index 0)\n",
        "\n",
        "\n",
        "*   the start index and the end index separated by colon\n",
        "\n"
      ],
      "metadata": {
        "id": "1kOE5N-HNhXD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=\"Hello World\"\n",
        "print(a[3:6])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nK4CkVdBOcKS",
        "outputId": "9b1892e5-742f-49eb-82bf-17f8aae559a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "lo \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#by leaving the start index the range will start  from first character\n",
        "\n",
        "a=\"Hello World\"\n",
        "print(a[:6])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "esnZXiiTOu1m",
        "outputId": "eb0c7f9e-9578-4719-91e2-9789a89369d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#by leaving the end index the range will go to the end\n",
        "\n",
        "a=\"Hello World\"\n",
        "print(a[3:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SU3Tikv9PPKF",
        "outputId": "667e086e-579d-4c1d-eeb7-b2acc0aba5e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "lo World\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#negative indexes used to start the slice from the end of the string\n",
        "\n",
        "b = \"Hello, World!\"\n",
        "print(b[-5:-2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nYwveDAoPlbK",
        "outputId": "5a2d8ccc-b13a-45fa-b6e4-a5c00c395d70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "orl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**modify stringst**"
      ],
      "metadata": {
        "id": "qqwCLCKfQZXB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#the upper() method changes the string to upper case(capital letters)\n",
        "\n",
        "a=\"Hello World\"\n",
        "print(a.upper())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dPuoXm4IQeYQ",
        "outputId": "0e1cd89b-623d-4c58-b5e4-2130771d5c24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "HELLO WORLD\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#the lower() method changes the string to lower case(small letters)\n",
        "\n",
        "a=\"HELLO WORLD\"\n",
        "print(a.lower())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FFmFB-TwQ1o9",
        "outputId": "0af122bb-c701-4f1a-f508-85146ff5ab3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello world\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Remove whitespace\n",
        "#the strip() remove whitespace from the beginning and end of the string\n",
        "\n",
        "a=\"    Hello World    \"\n",
        "print(a.strip())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ixJqZ4KuSGZd",
        "outputId": "9dfbfe5e-949c-40db-cf8b-a83455035a4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello World\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#the replace() method replace a string with another string\n",
        "\n",
        "a=\"Hello World\"\n",
        "print(a.replace(\"H\",\"J\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e2wjSbEvSn7Q",
        "outputId": "e597b6c3-fb0a-444e-c561-b8385dcea438"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jello World\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#split string\n",
        "#the split() method splits the string into substring and character we mentioned it will removed\n",
        "\n",
        "a=\"Hello World\"\n",
        "print(a.split(\"l\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FE-W0t9UTqSu",
        "outputId": "d11ed0a8-46f2-43a2-cfe5-0f2d16e3f573"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['He', '', 'o Wor', 'd']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "sting concatention"
      ],
      "metadata": {
        "id": "YMkPdY_6UxiH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#to combine to strings you can use the + operator\n",
        "\n",
        "a=\"Hello\"\n",
        "b=\"World\"\n",
        "c=a+b\n",
        "print(c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q6vcVOjeU3cu",
        "outputId": "b9170f86-435d-4802-b07f-869c6dc4280e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "HelloWorld\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#to add space between the combined strings use \"  \"\n",
        "\n",
        "a=\"Hello\"\n",
        "b=\"World\"\n",
        "c=a+\"  \"+b\n",
        "print(c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cr07RMeDViU2",
        "outputId": "29fe14a0-b033-4937-edc8-fc4c76a3af7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello  World\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**string format**"
      ],
      "metadata": {
        "id": "vVb-IihwXb5H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#we can't combine stings and numbers.so,with f-strings we can combine\n",
        "#to specify f-string put an f in front of the string and put the variable in {}\n",
        "\n",
        "age = 23\n",
        "print(f\"My age is {age} years\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VX0Mp7N-XgDg",
        "outputId": "12fec70f-ce12-441e-97cd-97b259185f13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "My age is 23 years\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "price = 59\n",
        "txt = f\"The price is {price} dollars\"\n",
        "print(txt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UV1gJpMMacMN",
        "outputId": "d7ab8226-c2cd-4634-9fcd-2b7813325061"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The price is 59 dollars\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#by adding colon : decimals were be after colon and .2f means point number with 2 decimals\n",
        "\n",
        "price = 59\n",
        "a= f\"The price is {price:.2f} dollars\"\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KYbjreQwahkD",
        "outputId": "648efaad-699d-4bf9-945d-3718260fc467"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The price is 59.00 dollars\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a= f\"The price is {20 * 59} dollars\"\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JruAIueidLFX",
        "outputId": "c78fba32-a3e6-46f7-abd8-0004509318a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The price is 1180 dollars\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Escape character**\n",
        "\n",
        "*   \\'  single quote\n",
        "\n",
        "*   \\\\  backslash\n",
        "\n",
        "*   \\n  new line\n",
        "*   \\r  carriage return - to avoid the before words\n",
        "\n",
        "\n",
        "*   \\t  tab - add space between two words\n",
        "\n",
        "\n",
        "*   \\b  backspace - remove space between two words\n",
        "\n",
        "\n",
        "*   \\f  form feed\n",
        "*   \\ooo  octal value -\n",
        "\n",
        "\n",
        "*   \\xhh  hex value -\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "vcu5wiHeeUu6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**String Methods**"
      ],
      "metadata": {
        "id": "wT8fU4WUCYuL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#capitalize() : it converts first character to upper case\n",
        "\n",
        "a=\"welcome\"\n",
        "x=a.capitalize()\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VGKwkjKvCfHG",
        "outputId": "67b617a5-ff72-40e4-c6b2-f5b4b4a5432f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#casefold() : convert string into lower case\n",
        "\n",
        "a=\"WELCOME TO THE WORLD\"\n",
        "x=a.casefold()\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w8Z5i7_VDFPi",
        "outputId": "b64e3cbb-338c-412f-b2dc-8c24abb5b35a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "welcome to the world\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#center() : it will place the output in the center with  our required space\n",
        "\n",
        "a=\"orange\"\n",
        "x=a.center(15)\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X2lqHGm1DzJ-",
        "outputId": "5e5313c0-296f-467e-ab28-d66edf91c0ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     orange    \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Boolean**"
      ],
      "metadata": {
        "id": "WP0kE2F0GwB5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#in this you will get only two answers those are 'true' or 'false'\n",
        "\n",
        "print(9>5)\n",
        "print(9==5)\n",
        "print(9<5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EnYv2q18FJKN",
        "outputId": "44e98a38-e378-4c4c-812b-40b29436437e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# it displays the sentence if the given sentence is true\n",
        "\n",
        "a = 30\n",
        "b = 6\n",
        "\n",
        "if b > a:\n",
        "  print(\"b is greater than a\")\n",
        "else:\n",
        "  print(\"b is not greater than a\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xEYQPxVNHLLN",
        "outputId": "aaa7cab3-83ab-4232-d387-85c0c0ed2435"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b is not greater than a\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# in boolean most of get true but\n",
        "#any string comes true ,except empty strings\n",
        "#any number is true ,except 0\n",
        "#any list,tuple,set,dictionary are true ,except empty ones\n",
        "\n",
        "bool(\"xyz\")\n",
        "bool(123)\n",
        "bool([\"apple\", \"cherry\", \"banana\"])"
      ],
      "metadata": {
        "id": "_DZ_WfudHhAi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c454040b-041a-448c-d578-b90c186ed6b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#in boolean some values are false\n",
        "#empty values like (),[],{},\"\",and the number 0 and the value none it will bw the false\n",
        "\n",
        "bool(False)\n",
        "bool(None)\n",
        "bool(0)\n",
        "bool(\"\")\n",
        "bool(())\n",
        "bool([])\n",
        "bool({})\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BdmXVAHucFNK",
        "outputId": "56e0b72b-ee2c-43ea-e823-fcf29b971935"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Operators**\n",
        "\n",
        "\n",
        "\n",
        "*   arthimetic operators\n",
        "\n",
        "*   assignment operators\n",
        "*   comparison operators\n",
        "\n",
        "*   identity opereators\n",
        "*   membership operators\n",
        "\n",
        "*   betwise operators\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ohXA1SSLdX6L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Arthimetic operators"
      ],
      "metadata": {
        "id": "OuMjo7bWedaR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#addition:+  ;to add two values\n",
        "\n",
        "x = 5\n",
        "y = 3\n",
        "\n",
        "print(x + y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UzcBdXsCeg5W",
        "outputId": "844df515-b6de-4429-9905-27f35f1c740a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#subtraction:- ;to subtract to values\n",
        "\n",
        "x = 5\n",
        "y = 3\n",
        "\n",
        "print(x - y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UZpt5Jsme1p6",
        "outputId": "bcc4ab13-7206-41d1-88ea-6feeff735546"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#multiplication:* ;to multiply to values\n",
        "\n",
        "x = 5\n",
        "y = 3\n",
        "\n",
        "print(x * y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x2ho2FE5fC_v",
        "outputId": "5ca915e8-b38f-4135-c442-f90a8e9d3a6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#division:/ ;to divide to values\n",
        "\n",
        "x = 12\n",
        "y = 3\n",
        "\n",
        "print(x / y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J7NxJijbfdL6",
        "outputId": "e1b48115-3653-4538-a21d-26a89e88c62b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#modulus:% ;to get remainder on doing division\n",
        "\n",
        "x = 5\n",
        "y = 2\n",
        "\n",
        "print(x % y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H0i-zZlrfqZe",
        "outputId": "40894d02-1997-4b45-d3e7-45686beb2801"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#exponantiation:** ; it means raising a number to the power of another number\n",
        "\n",
        "x = 2\n",
        "y = 5\n",
        "\n",
        "print(x ** y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FSQ5HhpQgH_0",
        "outputId": "9a391b23-3f38-4eb3-d9b9-ce60b2ca3b27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "32\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#floor division:// ;It performs division but rounds down (takes the floor) to the nearest whole number (integer).\n",
        "\n",
        "x = 15\n",
        "y = 2\n",
        "\n",
        "print(x // y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lGYbFJnkgwqD",
        "outputId": "74494d17-826f-42e3-88aa-6466de0661a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Assignment operators\n",
        "\n",
        "\n",
        "\n",
        "*   =  \tSimple assignment\n",
        "\n",
        "*   +=  Add and assign\n",
        "\n",
        "\n",
        "*   -=  Subtract and assign\n",
        "*   *=  Multiply and assign\n",
        "\n",
        "\n",
        "*   /=  Divide and assign\n",
        "*   %=  Modulo and assign\n",
        "\n",
        "*   //=  \tFloor divide and assign\n",
        "*   **=  Exponent and assign\n",
        "\n",
        "*   &=  Bitwise AND and assign\n",
        "*   |=  \tBitwise OR and assig\n",
        "\n",
        "*   ^=  Bitwise XOR and assign\n",
        "\n",
        "*   >>=  \tRight shift and assign\n",
        "*   <<=  \tLeft shift and assign\n",
        "\n",
        "\n",
        "*   :=  Walrus operator (assign in expressions)\tif (n := len(\"hello\")) > 3:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "748if66Rk_IH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Basic assignment\n",
        "x = 10\n",
        "print(\"Initial x =\", x)\n",
        "\n",
        "# +=\n",
        "x += 5\n",
        "print(\"After x += 5:\", x)\n",
        "\n",
        "# -=\n",
        "x -= 3\n",
        "print(\"After x -= 3:\", x)\n",
        "\n",
        "# *=\n",
        "x *= 2\n",
        "print(\"After x *= 2:\", x)\n",
        "\n",
        "# /=\n",
        "x /= 4\n",
        "print(\"After x /= 4:\", x)\n",
        "\n",
        "# %=\n",
        "x %= 3\n",
        "print(\"After x %= 3:\", x)\n",
        "\n",
        "# //=\n",
        "x = 10\n",
        "x //= 3\n",
        "print(\"After x //= 3:\", x)\n",
        "\n",
        "# **=\n",
        "x = 2\n",
        "x **= 4\n",
        "print(\"After x **= 4:\", x)\n",
        "\n",
        "# Bitwise AND &=\n",
        "x = 6  # 110\n",
        "x &= 3 # 011 → 010 → 2\n",
        "print(\"After x &= 3:\", x)\n",
        "\n",
        "# Bitwise OR |=\n",
        "x |= 1 # 010 | 001 = 011 = 3\n",
        "print(\"After x |= 1:\", x)\n",
        "\n",
        "# Bitwise XOR ^=\n",
        "x ^= 2 # 011 ^ 010 = 001 = 1\n",
        "print(\"After x ^= 2:\", x)\n",
        "\n",
        "# Left shift <<=\n",
        "x <<= 2  # 1 << 2 = 4\n",
        "print(\"After x <<= 2:\", x)\n",
        "\n",
        "# Right shift >>=\n",
        "x >>= 1  # 4 >> 1 = 2\n",
        "print(\"After x >>= 1:\", x)\n",
        "\n",
        "# Walrus operator :=\n",
        "if (length := len(\"Hello\")) > 3:\n",
        "    print(\"Length using := is:\", length)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "km_Gnv4qk8ZM",
        "outputId": "a3cb42f6-c545-4f7d-9ae9-eab62f24a27a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial x = 10\n",
            "After x += 5: 15\n",
            "After x -= 3: 12\n",
            "After x *= 2: 24\n",
            "After x /= 4: 6.0\n",
            "After x %= 3: 0.0\n",
            "After x //= 3: 3\n",
            "After x **= 4: 16\n",
            "After x &= 3: 2\n",
            "After x |= 1: 3\n",
            "After x ^= 2: 1\n",
            "After x <<= 2: 4\n",
            "After x >>= 1: 2\n",
            "Length using := is: 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "python  comparison operators\n",
        "\n",
        "*   ==\tEqual\n",
        "*   !=\tNot equal\n",
        "\n",
        "*   >\tGreater than\n",
        "*   <\tLess than\n",
        "\n",
        "*   >=\tGreater than or equal to\n",
        "*   <=\tLess than or equal to\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "S_m0rpH0w_oZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 10\n",
        "y = 5\n",
        "\n",
        "# Equal to\n",
        "print(\"x == y:\", x == y)\n",
        "\n",
        "# Not equal to\n",
        "print(\"x != y:\", x != y)\n",
        "\n",
        "# Greater than\n",
        "print(\"x > y:\", x > y)\n",
        "\n",
        "# Less than\n",
        "print(\"x < y:\", x < y)\n",
        "\n",
        "# Greater than or equal to\n",
        "print(\"x >= y:\", x >= y)\n",
        "\n",
        "# Less than or equal to\n",
        "print(\"x <= y:\", x <= y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3L5BtvtcxtwK",
        "outputId": "58731478-b3c4-4111-d9b8-1449dd296c72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x == y: False\n",
            "x != y: True\n",
            "x > y: True\n",
            "x < y: False\n",
            "x >= y: True\n",
            "x <= y: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "logical operators\n",
        "\n",
        "\n",
        "\n",
        "*   and :\tReturns True if both statements are true\n",
        "\n",
        "*   or :\tReturns True if one of the statements is true\n",
        "*   not :\tReverse the result, returns False if the result is true\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "BL9eMDIoyLFP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 7\n",
        "\n",
        "# AND: True only if both conditions are True\n",
        "print(\"x < 10 and x > 5:\", x < 10 and x > 5)  # True and True → True\n",
        "print(\"x < 5 and x > 2:\", x < 5 and x > 2)    # False and True → False\n",
        "\n",
        "# OR: True if at least one condition is True\n",
        "print(\"x < 5 or x > 2:\", x < 5 or x > 2)      # False or True → True\n",
        "print(\"x < 5 or x > 10:\", x < 5 or x > 10)    # False or False → False\n",
        "\n",
        "# NOT: Reverses the result\n",
        "print(\"not(x < 10 and x > 5):\", not(x < 10 and x > 5))  # not(True) → False\n",
        "print(\"not(x < 5):\", not(x < 5))                        # not(False) → True\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wHr3jp5cypt0",
        "outputId": "12913156-a9bc-4c49-f2b6-8e87a04c4eb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x < 10 and x > 5: True\n",
            "x < 5 and x > 2: False\n",
            "x < 5 or x > 2: True\n",
            "x < 5 or x > 10: False\n",
            "not(x < 10 and x > 5): False\n",
            "not(x < 5): True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "identify operators\n",
        "\n",
        "\n",
        "\n",
        "*   is :\tReturns True if both variables are the same object\t: x is y\n",
        "*   is not :\tReturns True if both variables are not the same object :\tx is not y\n",
        "\n"
      ],
      "metadata": {
        "id": "mc_bMgv5zE_r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 5\n",
        "b = 5\n",
        "print(\"a is b:\", a is b)\n",
        "print(\"a is not b:\", a is not b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_vUK8c8izZ3t",
        "outputId": "aa3a6483-b521-4fad-b386-ee060b8179ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a is b: True\n",
            "a is not b: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "membership operators\n",
        "\n",
        "\n",
        "\n",
        "*   in :\tReturns True if a sequence with the specified value is present in the object :\tx in y\n",
        "*   not in :\tReturns True if a sequence with the specified value is not present in the object :\tx not in y\n",
        "\n"
      ],
      "metadata": {
        "id": "p8o3IZ5Fzyx8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "\n",
        "print(\"'banana' in fruits:\", \"banana\" in fruits)      # True\n",
        "print(\"'grape' not in fruits:\", \"grape\" not in fruits) # True"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rFtvucRu0ine",
        "outputId": "4b614ce9-f0af-48db-a1f1-8e013ff6184b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'banana' in fruits: True\n",
            "'grape' not in fruits: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "bitwise operators\n",
        "\n",
        "\n",
        "\n",
        "*   & :\tAND\tSets each bit to 1 if both bits are 1 :\tx & y\n",
        "*   | :\tOR\tSets each bit to 1 if one of two bits is 1 :\tx | y\n",
        "\n",
        "*   ^ :\tXOR\tSets each bit to 1 if only one of two bits is 1 :\tx ^ y\n",
        "*   ~ :\tNOT\tInverts all the bits :\t~x\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "V8wEm4PH36Qa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 6   # Binary: 110\n",
        "y = 3   # Binary: 011\n",
        "\n",
        "# & (AND) - only 1 if both bits are 1\n",
        "print(\"x & y:\", x & y)   # 110 & 011 = 010 (2)\n",
        "\n",
        "# | (OR) - 1 if either bit is 1\n",
        "print(\"x | y:\", x | y)   # 110 | 011 = 111 (7)\n",
        "\n",
        "# ^ (XOR) - 1 if only one of the bits is 1\n",
        "print(\"x ^ y:\", x ^ y)   # 110 ^ 011 = 101 (5)\n",
        "\n",
        "# ~ (NOT) - flips all bits (2's complement)\n",
        "print(\"~x:\", ~x)         # ~6 = -7\n",
        "print(\"~y:\", ~y)         # ~3 = -4\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5rx6DYZs4kbE",
        "outputId": "5262a1f1-1b83-4e61-9fcf-ffdda95c267c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x & y: 2\n",
            "x | y: 7\n",
            "x ^ y: 5\n",
            "~x: -7\n",
            "~y: -4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**lists**"
      ],
      "metadata": {
        "id": "aku4iKpM6A2-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=['joy','sam','ammu','bul']\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kAuLqpGX6DmU",
        "outputId": "514e30d0-0354-4552-c1eb-24aa220efea3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['joy', 'sam', 'ammu', 'bul']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=['joy','sam','ammu','bul']\n",
        "print(a[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "81wOinKR6nr6",
        "outputId": "a47a80cc-9dc5-41ff-8fc9-053072e15515"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ammu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=['joy','sam','ammu','bul']\n",
        "print(a[-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Od5W-pm56rYy",
        "outputId": "a49e9ef1-d57d-4bd8-8943-a07069b8ad7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "bul\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=['joy','sam','ammu','bul']\n",
        "print(a[2:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ejheTj8f62WG",
        "outputId": "588fd6a8-1ff4-45dd-c9b3-938847576a2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['ammu', 'bul']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=['joy','sam','ammu','bul']\n",
        "print(a[1:3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cMAK5SST69wP",
        "outputId": "f04eb712-52a1-459f-b755-e1a22034023f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['sam', 'ammu']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#A 2D list (two-dimensional list) is a list of lists — like a table with rows and columns.\n",
        "\n",
        "# Step 1: Create a 2D list (3 rows × 3 columns)\n",
        "matrix = [\n",
        "    [1, 2, 3],\n",
        "    [4, 5, 6],\n",
        "    [7, 8, 9]\n",
        "]\n",
        "\n",
        "# Step 2: Display the 2D list\n",
        "print(\"Original 2D List:\")\n",
        "for row in matrix:\n",
        "    print(row)\n",
        "\n",
        "# Step 3: Access specific elements\n",
        "print(\"\\nAccessing elements:\")\n",
        "print(\"Element at [0][0]:\", matrix[0][0])  # 1\n",
        "print(\"Element at [2][1]:\", matrix[2][1])  # 8\n",
        "\n",
        "# Step 4: Modify an element\n",
        "matrix[1][1] = 99\n",
        "print(\"\\nModified 2D List:\")\n",
        "for row in matrix:\n",
        "    print(row)\n",
        "\n",
        "# Step 5: Loop through all elements\n",
        "print(\"\\nAll elements:\")\n",
        "for i in range(len(matrix)):\n",
        "    for j in range(len(matrix[0])):\n",
        "        print(f\"matrix[{i}][{j}] = {matrix[i][j]}\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F1QG0p6Y-oDn",
        "outputId": "3c834997-a8ba-46e7-abde-3d61e3eb86c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original 2D List:\n",
            "[1, 2, 3]\n",
            "[4, 5, 6]\n",
            "[7, 8, 9]\n",
            "\n",
            "Accessing elements:\n",
            "Element at [0][0]: 1\n",
            "Element at [2][1]: 8\n",
            "\n",
            "Modified 2D List:\n",
            "[1, 2, 3]\n",
            "[4, 99, 6]\n",
            "[7, 8, 9]\n",
            "\n",
            "All elements:\n",
            "matrix[0][0] = 1\n",
            "matrix[0][1] = 2\n",
            "matrix[0][2] = 3\n",
            "matrix[1][0] = 4\n",
            "matrix[1][1] = 99\n",
            "matrix[1][2] = 6\n",
            "matrix[2][0] = 7\n",
            "matrix[2][1] = 8\n",
            "matrix[2][2] = 9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**list methods**\n",
        "\n",
        "\n",
        "\n",
        "*   append() :\tAdds a single item to the end of the list\n",
        "\n",
        "*   extend() :\tAdds elements of another list to the end\n",
        "\n",
        "*   insert() :\tInserts an item at a given index\n",
        "\n",
        "*  remove() :\tRemoves the first occurrence of a value\n",
        "*  pop() :\tRemoves and returns an item at a given index\n",
        "\n",
        "\n",
        "*   clear() :\tRemoves all items from the list\n",
        "\n",
        "\n",
        "*  index() :\tReturns the index of the first match\n",
        "\n",
        "\n",
        "*   count() :\tCounts the number of occurrences of a value\n",
        "\n",
        "*   sort() :\tSorts the list in ascending order\n",
        "\n",
        "*   reverse() :\tReverses the list\n",
        "*   copy() :\tReturns a shallow copy of the list\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "uGUaUydH_vyU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Sample list\n",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "\n",
        "# append()\n",
        "fruits.append(\"mango\")\n",
        "print(\"After append:\", fruits)\n",
        "\n",
        "# extend()\n",
        "fruits.extend([\"orange\", \"grape\"])\n",
        "print(\"After extend:\", fruits)\n",
        "\n",
        "# insert()\n",
        "fruits.insert(1, \"kiwi\")\n",
        "print(\"After insert at index 1:\", fruits)\n",
        "\n",
        "# remove()\n",
        "fruits.remove(\"banana\")\n",
        "print(\"After remove 'banana':\", fruits)\n",
        "\n",
        "# pop()\n",
        "popped = fruits.pop(2)\n",
        "print(f\"Popped element: {popped}\")\n",
        "print(\"After pop:\", fruits)\n",
        "\n",
        "# index()\n",
        "print(\"Index of 'grape':\", fruits.index(\"grape\"))\n",
        "\n",
        "# count()\n",
        "print(\"Count of 'apple':\", fruits.count(\"apple\"))\n",
        "\n",
        "# sort()\n",
        "fruits.sort()\n",
        "print(\"Sorted list:\", fruits)\n",
        "\n",
        "# reverse()\n",
        "fruits.reverse()\n",
        "print(\"Reversed list:\", fruits)\n",
        "\n",
        "# copy()\n",
        "copy_fruits = fruits.copy()\n",
        "print(\"Copy of list:\", copy_fruits)\n",
        "\n",
        "# clear()\n",
        "fruits.clear()\n",
        "print(\"After clear:\", fruits)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UqbchCVh_6d5",
        "outputId": "ec5bfbc8-ce99-4754-9411-3c5d37993532"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After append: ['apple', 'banana', 'cherry', 'mango']\n",
            "After extend: ['apple', 'banana', 'cherry', 'mango', 'orange', 'grape']\n",
            "After insert at index 1: ['apple', 'kiwi', 'banana', 'cherry', 'mango', 'orange', 'grape']\n",
            "After remove 'banana': ['apple', 'kiwi', 'cherry', 'mango', 'orange', 'grape']\n",
            "Popped element: cherry\n",
            "After pop: ['apple', 'kiwi', 'mango', 'orange', 'grape']\n",
            "Index of 'grape': 4\n",
            "Count of 'apple': 1\n",
            "Sorted list: ['apple', 'grape', 'kiwi', 'mango', 'orange']\n",
            "Reversed list: ['orange', 'mango', 'kiwi', 'grape', 'apple']\n",
            "Copy of list: ['orange', 'mango', 'kiwi', 'grape', 'apple']\n",
            "After clear: []\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Tuples**\n",
        "\n",
        "\n",
        "\n",
        "*   A tuple is a collection which is ordered and unchangeable and allow duplicate values.\n",
        "\n",
        "\n",
        "* Tuples are written with round brackets.  \n",
        "\n",
        "*   Tuple items are indexed, the first item has index [0], the second item has index [1] etc.\n",
        "*   count() : Returns the number of times a specified value occurs in a tuple\n",
        "\n",
        "*   index() : Searches the tuple for a specified value and returns the position of where it was found and it specified the first value\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "RAyJ-eN11Tr6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating tuples\n",
        "fruits = (\"apple\", \"banana\", \"cherry\")\n",
        "numbers = (1, 2, 3, 2, 4)\n",
        "\n",
        "# Accessing elements\n",
        "print(\"First fruit:\", fruits[0])     # Output: apple\n",
        "print(\"Last fruit:\", fruits[-1])     # Output: cherry\n",
        "\n",
        "# Length of tuple\n",
        "print(\"Number of fruits:\", len(fruits))   # Output: 3\n",
        "\n",
        "# Loop through a tuple\n",
        "print(\"\\nAll fruits:\")\n",
        "for fruit in fruits:\n",
        "    print(fruit)\n",
        "\n",
        "# Count and index\n",
        "print(\"\\nCount of 2 in numbers tuple:\", numbers.count(2))  # Output: 2\n",
        "print(\"Index of 3 in numbers tuple:\", numbers.index(3))    # Output: 2\n",
        "\n",
        "# Tuple unpacking\n",
        "person = (\"Alice\", 25, \"Engineer\")\n",
        "name, age, job = person\n",
        "print(f\"\\nName: {name}, Age: {age}, Job: {job}\")\n",
        "\n",
        "# Tuple inside list\n",
        "students = [(\"John\", 90), (\"Emma\", 95), (\"Liam\", 88)]\n",
        "print(\"\\nStudent scores:\")\n",
        "for student in students:\n",
        "    print(f\"{student[0]} scored {student[1]}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fn4jV7ux1gHD",
        "outputId": "516330e6-6186-439c-ee77-871caf4cc94c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First fruit: apple\n",
            "Last fruit: cherry\n",
            "Number of fruits: 3\n",
            "\n",
            "All fruits:\n",
            "apple\n",
            "banana\n",
            "cherry\n",
            "\n",
            "Count of 2 in numbers tuple: 2\n",
            "Index of 3 in numbers tuple: 2\n",
            "\n",
            "Name: Alice, Age: 25, Job: Engineer\n",
            "\n",
            "Student scores:\n",
            "John scored 90\n",
            "Emma scored 95\n",
            "Liam scored 88\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**sets**\n",
        "\n",
        "\n",
        "\n",
        "*  A set is a collection which is unordered, unchangeable*, and unindexed.\n",
        "*    set is an unordered collection of unique elements. It is useful when you want to store multiple items without duplicates.\n",
        "\n"
      ],
      "metadata": {
        "id": "XcIdNmwH-p3L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating sets\n",
        "set1 = {1, 2, 3, 4}\n",
        "set2 = {3, 4, 5, 6}\n",
        "\n",
        "# Union\n",
        "print(\"Union:\", set1 | set2)\n",
        "\n",
        "# Intersection\n",
        "print(\"Intersection:\", set1 & set2)\n",
        "\n",
        "# Difference\n",
        "print(\"Difference (set1 - set2):\", set1 - set2)\n",
        "\n",
        "# Symmetric Difference\n",
        "print(\"Symmetric Difference:\", set1 ^ set2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V11U2eaw-udU",
        "outputId": "660616da-4064-4dac-8dc3-d8a98570dd6e"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Union: {1, 2, 3, 4, 5, 6}\n",
            "Intersection: {3, 4}\n",
            "Difference (set1 - set2): {1, 2}\n",
            "Symmetric Difference: {1, 2, 5, 6}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "set methods\n",
        "\n",
        "\n",
        "\n",
        "*   add(item) : Adds an item to the set              \n",
        "*   remove(item) :\tRemoves an item; error if not found\n",
        "\n",
        "\n",
        "*   discard(item) : Removes an item; no error if missing\n",
        "*   clear() : Removes all items\n",
        "\n",
        "*   copy() : Returns a shallow copy  \n",
        "*   pop() : Removes a random item\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "d-UKhHZ3_YZV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_set = {10, 20, 30}\n",
        "\n",
        "# Add element\n",
        "my_set.add(40)\n",
        "\n",
        "# Remove element\n",
        "my_set.remove(20)  # Will raise error if 20 is not found\n",
        "\n",
        "# Discard element (safe)\n",
        "my_set.discard(100)  # No error\n",
        "\n",
        "# Copy set\n",
        "copy_set = my_set.copy()\n",
        "\n",
        "# Pop random element\n",
        "removed = my_set.pop()\n",
        "\n",
        "# Clear all elements\n",
        "my_set.clear()\n",
        "\n",
        "print(\"Copied Set:\", copy_set)\n",
        "print(\"Removed Element:\", removed)\n",
        "print(\"Cleared Set:\", my_set)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VLYeCxpn_VDK",
        "outputId": "ba7c8d92-d108-474b-d2ae-12980ac93162"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Copied Set: {40, 10, 30}\n",
            "Removed Element: 40\n",
            "Cleared Set: set()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**conditional statement**\n",
        "\n",
        "Conditional statements are used to perform different actions based on different conditions."
      ],
      "metadata": {
        "id": "age0pUkIAKnB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#if statement\n",
        "\n",
        "x = 10\n",
        "\n",
        "if x > 5:\n",
        "    print(\"x is greater than 5\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i3srMYAgA4yk",
        "outputId": "c1e17aaa-5332-467a-ec96-dce07a37fad7"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x is greater than 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 3\n",
        "\n",
        "if x > 5:\n",
        "    print(\"x is greater than 5\")\n",
        "else:\n",
        "    print(\"x is not greater than 5\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6MalOOYKCNI0",
        "outputId": "3843ab51-48fd-4dac-ef7a-646c2a371942"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x is not greater than 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 5\n",
        "\n",
        "if x > 5:\n",
        "    print(\"x is greater than 5\")\n",
        "elif x == 5:\n",
        "    print(\"x is equal to 5\")\n",
        "else:\n",
        "    print(\"x is less than 5\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W1cmEmqSCQlg",
        "outputId": "bc6fabd3-43d8-488b-a7cb-d9fb9a793196"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x is equal to 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 15\n",
        "\n",
        "if x > 10:\n",
        "    print(\"x is greater than 10\")\n",
        "    if x > 20:\n",
        "        print(\"x is also greater than 20\")\n",
        "    else:\n",
        "        print(\"x is not greater than 20\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tDtMnW0_CXGS",
        "outputId": "20f30ed1-5165-47a9-8ae7-c8ebb7b8fd12"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x is greater than 10\n",
            "x is not greater than 20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**dictionaries**\n",
        "\n",
        "A dictionary is a collection of key-value pairs. It’s used to store data values like a map, where each key is unique and is used to access its value.\n",
        "\n"
      ],
      "metadata": {
        "id": "u_KmR1KHCqsJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Example dictionary\n",
        "student = {\n",
        "    \"name\": \"Bhavya\",\n",
        "    \"age\": 20,\n",
        "    \"course\": \"AI/DS\"\n",
        "}\n",
        "#key:name,age,course\n",
        "#values:bhavya,20,AI/DS"
      ],
      "metadata": {
        "id": "XefKY_xHCzsO"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "student = {\"name\": \"Bhavya\", \"age\": 20}\n",
        "print(student)\n",
        "print(student[\"name\"])\n",
        "print(student.get(\"age\"))\n",
        "student[\"age\"] = 21\n",
        "print(student)\n",
        "student[\"branch\"] = \"CSE\"\n",
        "print(student)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h1gac7hHIsd6",
        "outputId": "a1bd9076-fbf4-4eef-f462-4ad1aeee6b51"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'name': 'Bhavya', 'age': 20}\n",
            "Bhavya\n",
            "20\n",
            "{'name': 'Bhavya', 'age': 21}\n",
            "{'name': 'Bhavya', 'age': 21, 'branch': 'CSE'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "student = {\n",
        "    \"name\": \"Bhavya\",\n",
        "    \"age\": 20\n",
        "}\n",
        "print(student[\"name\"])\n",
        "print(student.get(\"age\"))\n",
        "student.pop(\"college\", None)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AQDhTpTRJ09W",
        "outputId": "1c1fc7be-d9b3-41c9-8722-5556d1bcbe40"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bhavya\n",
            "20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "thisdict =  {\n",
        "  \"branch\": \"CSE\",\n",
        "  \"collage\": \"KietW\",\n",
        "  \"year\": 2027\n",
        "}\n",
        "for x in thisdict:\n",
        "  print(thisdict[x])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KnWCc4q1JwtQ",
        "outputId": "b9310436-fe0f-49c5-91fb-9c42cf5c5a0f"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CSE\n",
            "KietW\n",
            "2027\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Match case**"
      ],
      "metadata": {
        "id": "808_hs1ZIySl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "month = 4\n",
        "\n",
        "match month:\n",
        "    case 1:\n",
        "        print(\"January\")\n",
        "    case 2:\n",
        "        print(\"February\")\n",
        "    case 3:\n",
        "        print(\"March\")\n",
        "    case 4:\n",
        "        print(\"April\")\n",
        "    case 5:\n",
        "        print(\"May\")\n",
        "    case 6:\n",
        "        print(\"June\")\n",
        "    case 7:\n",
        "        print(\"July\")\n",
        "    case 8:\n",
        "        print(\"August\")\n",
        "    case 9:\n",
        "        print(\"September\")\n",
        "    case 10:\n",
        "        print(\"October\")\n",
        "    case 11:\n",
        "        print(\"November\")\n",
        "    case 12:\n",
        "        print(\"December\")\n",
        "    case _:\n",
        "        print(\"Invalid month\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YO_purOvI6fS",
        "outputId": "a86120ae-57d5-4053-cafc-b5e6787fcfac"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "April\n"
          ]
        }
      ]
    }
  ]
}
